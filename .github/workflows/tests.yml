#
#   ___       ___       ___       ___       ___
#  /\  \     /\__\     /\  \     /\  \     /\  \
#  \:\  \   /:/__/_   _\:\  \   /::\  \   /::\  \
#  /::\__\ /::\/\__\ /\/::\__\ /:/\:\__\ /:/\:\__\
# /:/\/__/ \/\::/  / \::/\/__/ \:\ \/__/ \:\ \/__/
# \/__/      /:/  /   \:\__\    \:\__\    \:\__\
#            \/__/     \/__/     \/__/     \/__/
#
# Copyright 2022 - 2023 Ville Rissanen
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1.   Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#
# 2.   Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

name: Tests

on:
  push:
    branches: [ senpai ]
  pull_request:
    branches: [ senpai ]

  workflow_dispatch:
jobs:
  test:
    strategy:
      matrix:
        compiler: [ gcc, msvc, clang ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        c_standard: [ 90, 99, 11, 17 ]
        cpp_standard: [ 98, 11, 14, 17, 20 ]
#       fortran_standard: [ 2003, 2008, 2018 ]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          - os: macos-latest
            compiler: msvc
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: gcc

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Environment
        run: |
          cmake -E make_directory ${{runner.workspace}}/build

      - if: matrix.compiler
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
               cmake -DCMAKE_BUILD_TYPE=Debug \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
                  -DCMAKE_C_STANDARD=${{ matrix.c_standard }} \
                  -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} \
#                 -DCMAKE_FORTRAN_STANDARD=${{ matrix.fortran_standard }} \
               $GITHUB_WORKSPACE

      - if: (matrix.compiler != 'clang') || (matrix.compiler != 'gcc')
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug \
                -DCMAKE_C_STANDARD=${{ matrix.c_standard }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cpp_standard }} \
                $GITHUB_WORKSPACE

      - name: Build
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake --build . --config Debug

      - name: Test
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          ctest --extra-verbose --output-on-failure --build-config Debug